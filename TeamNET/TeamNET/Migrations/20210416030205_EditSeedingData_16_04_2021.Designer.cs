// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamNET.Models;

namespace TeamNET.Migrations
{
    [DbContext(typeof(OJTDbContext))]
    [Migration("20210416030205_EditSeedingData_16_04_2021")]
    partial class EditSeedingData_16_04_2021
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "291cbc7f-1345-45df-b8c2-96111d13ad60",
                            ConcurrencyStamp = "7f1afc1e-eb95-4455-b6b9-301e5fc46ac4",
                            Name = "System Admin",
                            NormalizedName = "SYSTEM ADMIN"
                        },
                        new
                        {
                            Id = "947b70ee-4b80-4299-a3e4-b03df15501c1",
                            ConcurrencyStamp = "ead43932-327f-411e-9313-bc399e503d22",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "e346ef58-52dd-485d-92a3-25a64144bdfa",
                            ConcurrencyStamp = "b5591e23-dda4-4788-a3b6-1fb3b1f07d04",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "f7e3b187-7743-4c11-a73f-398fe418acd1",
                            ConcurrencyStamp = "5836f016-3405-4b44-b692-44cf861babb0",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "a35c7eb1-a14a-4eed-9ec2-467127acedc1",
                            ConcurrencyStamp = "cd64acc6-d3ee-42f5-96a1-0518e9e94509",
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "06b12f97-bb16-434a-9982-e3d3dc1c5145",
                            RoleId = "291cbc7f-1345-45df-b8c2-96111d13ad60"
                        },
                        new
                        {
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c",
                            RoleId = "e346ef58-52dd-485d-92a3-25a64144bdfa"
                        },
                        new
                        {
                            UserId = "1efe96d9-6618-4269-a6e3-ae1e3d3eecc4",
                            RoleId = "e346ef58-52dd-485d-92a3-25a64144bdfa"
                        },
                        new
                        {
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba",
                            RoleId = "f7e3b187-7743-4c11-a73f-398fe418acd1"
                        },
                        new
                        {
                            UserId = "29a908b8-3ac4-45ea-a8a1-1cf9946079c7",
                            RoleId = "f7e3b187-7743-4c11-a73f-398fe418acd1"
                        },
                        new
                        {
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            RoleId = "947b70ee-4b80-4299-a3e4-b03df15501c1"
                        },
                        new
                        {
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c",
                            RoleId = "947b70ee-4b80-4299-a3e4-b03df15501c1"
                        },
                        new
                        {
                            UserId = "3c592e96-f3ad-4e8b-9cbe-afb7ea745362",
                            RoleId = "947b70ee-4b80-4299-a3e4-b03df15501c1"
                        },
                        new
                        {
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c",
                            RoleId = "a35c7eb1-a14a-4eed-9ec2-467127acedc1"
                        },
                        new
                        {
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5",
                            RoleId = "a35c7eb1-a14a-4eed-9ec2-467127acedc1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AbilityId");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            AbilityId = 1,
                            AbilityName = "Tính tự lập",
                            Color = "#3a2d38"
                        },
                        new
                        {
                            AbilityId = 2,
                            AbilityName = "Khả năng làm việc",
                            Color = "#1d545b"
                        },
                        new
                        {
                            AbilityId = 3,
                            AbilityName = "Khả năng thực hành",
                            Color = "#f4d8cd"
                        },
                        new
                        {
                            AbilityId = 4,
                            AbilityName = "Khả năng giải quyết vấn đề",
                            Color = "#f78c3a"
                        },
                        new
                        {
                            AbilityId = 5,
                            AbilityName = "Khả năng lập kế hoạch",
                            Color = "#d62f0a"
                        },
                        new
                        {
                            AbilityId = 6,
                            AbilityName = "Khả năng sáng tạo",
                            Color = "#efa101"
                        },
                        new
                        {
                            AbilityId = 7,
                            AbilityName = "Khả năng truyền đạt",
                            Color = "#5db1bf"
                        },
                        new
                        {
                            AbilityId = 8,
                            AbilityName = "Khả năng thấu hiểu",
                            Color = "#662d9a"
                        },
                        new
                        {
                            AbilityId = 9,
                            AbilityName = "Có tính mềm dẻo, linh hoạt",
                            Color = "#2a9034"
                        },
                        new
                        {
                            AbilityId = 10,
                            AbilityName = "Khả năng nắm bắt tình huống",
                            Color = "#efaac3"
                        },
                        new
                        {
                            AbilityId = 11,
                            AbilityName = "Có tính kỷ luật",
                            Color = "#a33972"
                        },
                        new
                        {
                            AbilityId = 12,
                            AbilityName = "Khả năng chịu được áp lực",
                            Color = "#7291b6"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("CourseCurrentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("GuardianId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "06b12f97-bb16-434a-9982-e3d3dc1c5145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a889d8bb-7458-453d-b000-116c9e490a89",
                            CourseCurrentId = 0,
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "TeamNET",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQXwS8kAcgkkifYWCuDT4iBnzlce/KwhToGvO+kBMrd8pzEysLVUM8I5aHsl36VzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a0fb5ad-ea1c-418b-a3cb-36eb54a53121",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = "16a69b03-3b90-49a2-9cac-4b940c91514c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be407338-0f3c-4fab-a565-82cbe6f8d5fd",
                            CourseCurrentId = 2,
                            Email = "teacher1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Teacher1",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@GMAIL.COM",
                            NormalizedUserName = "TEACHER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiP3FV9GreaS0/BNuhhRyZPYv2fgwazsCwN4KqAnWHZCuunopPzaZxriSoO0ndmcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7b4846c-b002-498a-988f-35f9765aba7c",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@gmail.com"
                        },
                        new
                        {
                            Id = "1efe96d9-6618-4269-a6e3-ae1e3d3eecc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8f3fd37-7a17-43c9-a8e4-786addd64c29",
                            CourseCurrentId = 3,
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Teacher2",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER2@GMAIL.COM",
                            NormalizedUserName = "TEACHER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG38DrkxZ2FRd2lFQ1RpkSCI7GVFGtEt5RFaWurSQbCLrBq1RGSGgpijvQ6JIx8DiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1682c816-289c-4340-bd59-b0f5105ce2fd",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "2115c7e6-9aae-43cb-a406-d504578498ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f96fb037-0e72-42f1-bbf4-9ec1e9af59d6",
                            CourseCurrentId = 2,
                            Email = "doctor1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Doctor1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@GMAIL.COM",
                            NormalizedUserName = "DOCTOR1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH4I9RkGSUeE7leIx5FApQNO6IvGsx4VNQdQWSE7JCbN84/omw172nSOKnK11GY/kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa13b310-51e5-4ab6-8f12-642ccdcb0085",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@gmail.com"
                        },
                        new
                        {
                            Id = "29a908b8-3ac4-45ea-a8a1-1cf9946079c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba1d22a9-228f-45f2-800a-f58e6a75dded",
                            CourseCurrentId = 3,
                            Email = "doctor2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Doctor2",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@GMAIL.COM",
                            NormalizedUserName = "DOCTOR2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGl/S/g6WpyHH7+/XPo0KQYh72MBXW/UMbgayCyywdho2jU6uGM3BfX4m6shDtd5Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13f732c8-430b-482a-95ab-8f3051a531d5",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@gmail.com"
                        },
                        new
                        {
                            Id = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eae6add3-b092-499b-a15b-95f46f51347e",
                            CourseCurrentId = 2,
                            Email = "student1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Student1",
                            GuardianId = "3dabf300-50ab-438b-baaa-f6890f2b260c",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHJfgNJjyLQGfU8GzjtCGq4KmNMk1dMxsnvbSBRNgVnuQYkazdHESF4vcdr2syCvbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbc7bc30-0773-49ec-967f-ce1253fa4b00",
                            StudentCode = "ST00001",
                            TwoFactorEnabled = false,
                            UserName = "student1@gmail.com"
                        },
                        new
                        {
                            Id = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12d67eb5-bc3f-41be-bb76-93d0cdc16aea",
                            CourseCurrentId = 2,
                            Email = "student2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Student2",
                            GuardianId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdoQzI0H1FfijBeTT+CtQJGkVBEfcdi/X77gJZT6RSiY15G+RH2N0F4s936Qt9/tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c200244-54b9-4633-a3cc-d78faa480e69",
                            StudentCode = "ST00002",
                            TwoFactorEnabled = false,
                            UserName = "student2@gmail.com"
                        },
                        new
                        {
                            Id = "3c592e96-f3ad-4e8b-9cbe-afb7ea745362",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dd026e6-63c6-4873-a444-9e4b27d7c50f",
                            CourseCurrentId = 3,
                            Email = "student3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Student3",
                            GuardianId = "3dabf300-50ab-438b-baaa-f6890f2b260c",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@GMAIL.COM",
                            NormalizedUserName = "STUDENT3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2bRSRhibHJ6bFPpkWYjgERAs2aspHs7iBTpgh0euCKCcTcWYEqUXy29tDcjioDfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b73a75-0f47-4bb0-be8f-a2a977d7cda9",
                            StudentCode = "ST00003",
                            TwoFactorEnabled = false,
                            UserName = "student3@gmail.com"
                        },
                        new
                        {
                            Id = "3dabf300-50ab-438b-baaa-f6890f2b260c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1bc8bd4e-12e6-4c3e-82df-2fe61f266713",
                            CourseCurrentId = 0,
                            Email = "guardian1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Guardian1",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIAN1@GMAIL.COM",
                            NormalizedUserName = "GUARDIAN1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKiaHRddukbvZnhwc3+/nHZkVSaSY5DsZ/TFGX4tj73GX+9lJVVZpdUR8H68t/bLlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6f5ffb3-7ed8-4f59-b7df-6717a50b57f2",
                            TwoFactorEnabled = false,
                            UserName = "guardian1@gmail.com"
                        },
                        new
                        {
                            Id = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72c80930-54e9-4924-a131-7eb615efb422",
                            CourseCurrentId = 0,
                            Email = "guardian2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Guardian2",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIAN2@GMAIL.COM",
                            NormalizedUserName = "GUARDIAN2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHH5rem1iGLSVdjBP0T+i9yw/dbZ8OFfpAO1JZHqA09nJdfXBnUKQDVOml4wkpB+AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4db0edf7-014f-455b-ad35-28892d0f5c03",
                            TwoFactorEnabled = false,
                            UserName = "guardian2@gmail.com"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventContentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("EventContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            EventContentId = 1,
                            RealTime = new DateTime(2020, 2, 12, 13, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 1",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 2,
                            EventContentId = 1,
                            RealTime = new DateTime(2020, 2, 12, 15, 10, 20, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 1",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 3,
                            EventContentId = 1,
                            RealTime = new DateTime(2020, 2, 12, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Tính tự lập #Khả năng lập kế hoạch #Có tính kỷ luật - DoctorComentEvent 1",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 4,
                            EventContentId = 1,
                            RealTime = new DateTime(2020, 2, 12, 20, 15, 55, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 1",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 5,
                            EventContentId = 2,
                            RealTime = new DateTime(2020, 2, 15, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 2",
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            CommentId = 6,
                            EventContentId = 2,
                            RealTime = new DateTime(2020, 2, 15, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 2",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 7,
                            EventContentId = 2,
                            RealTime = new DateTime(2020, 2, 15, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng làm việc - DoctorComentEvent 2",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 8,
                            EventContentId = 2,
                            RealTime = new DateTime(2020, 2, 15, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 2",
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            CommentId = 9,
                            EventContentId = 3,
                            RealTime = new DateTime(2020, 5, 20, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 3",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 10,
                            EventContentId = 3,
                            RealTime = new DateTime(2020, 5, 20, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 3",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 11,
                            EventContentId = 3,
                            RealTime = new DateTime(2020, 5, 20, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng làm việc - DoctorComentEvent 3",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 12,
                            EventContentId = 3,
                            RealTime = new DateTime(2020, 5, 20, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 3",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 13,
                            EventContentId = 4,
                            RealTime = new DateTime(2020, 6, 25, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 4",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 14,
                            EventContentId = 4,
                            RealTime = new DateTime(2020, 6, 25, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 4",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 15,
                            EventContentId = 4,
                            RealTime = new DateTime(2020, 6, 25, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng làm việc - DoctorComentEvent 4",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 16,
                            EventContentId = 4,
                            RealTime = new DateTime(2020, 6, 25, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 4",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 17,
                            EventContentId = 5,
                            RealTime = new DateTime(2020, 7, 12, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 5",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 18,
                            EventContentId = 5,
                            RealTime = new DateTime(2020, 7, 12, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 5",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 19,
                            EventContentId = 5,
                            RealTime = new DateTime(2020, 7, 12, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng lập kế hoạch - DoctorComentEvent 5",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 20,
                            EventContentId = 5,
                            RealTime = new DateTime(2020, 7, 12, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 5",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 21,
                            EventContentId = 6,
                            RealTime = new DateTime(2020, 7, 20, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 6",
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            CommentId = 22,
                            EventContentId = 6,
                            RealTime = new DateTime(2020, 7, 20, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 6",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 23,
                            EventContentId = 6,
                            RealTime = new DateTime(2020, 7, 20, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Có tính mềm dẻo, linh hoạt - DoctorComentEvent 6",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 24,
                            EventContentId = 6,
                            RealTime = new DateTime(2020, 7, 20, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 6",
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            CommentId = 25,
                            EventContentId = 7,
                            RealTime = new DateTime(2021, 1, 25, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 7",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 26,
                            EventContentId = 7,
                            RealTime = new DateTime(2021, 1, 25, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 7",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 27,
                            EventContentId = 7,
                            RealTime = new DateTime(2021, 1, 25, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng thực hành - Có tính mềm dẻo, linh hoạt - DoctorComentEvent 7",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 28,
                            EventContentId = 7,
                            RealTime = new DateTime(2020, 7, 25, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 7",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 29,
                            EventContentId = 8,
                            RealTime = new DateTime(2021, 2, 2, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 8",
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            CommentId = 30,
                            EventContentId = 8,
                            RealTime = new DateTime(2021, 2, 2, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 8",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 31,
                            EventContentId = 8,
                            RealTime = new DateTime(2021, 2, 2, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng chịu được áp lực - DoctorComentEvent 8",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 32,
                            EventContentId = 8,
                            RealTime = new DateTime(2020, 2, 2, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 8",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            CommentId = 33,
                            EventContentId = 9,
                            RealTime = new DateTime(2021, 2, 10, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 9",
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            CommentId = 34,
                            EventContentId = 9,
                            RealTime = new DateTime(2021, 2, 10, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 9",
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CommentId = 35,
                            EventContentId = 9,
                            RealTime = new DateTime(2021, 2, 10, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Tính tự lập - DoctorComentEvent 9",
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            CommentId = 36,
                            EventContentId = 9,
                            RealTime = new DateTime(2021, 2, 10, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 9",
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            CommentId = 37,
                            EventContentId = 10,
                            RealTime = new DateTime(2021, 3, 15, 14, 15, 25, 0, DateTimeKind.Unspecified),
                            Text = "StudentComentEvent 10",
                            UserId = "3c592e96-f3ad-4e8b-9cbe-afb7ea745362"
                        },
                        new
                        {
                            CommentId = 38,
                            EventContentId = 10,
                            RealTime = new DateTime(2021, 3, 15, 16, 20, 50, 0, DateTimeKind.Unspecified),
                            Text = "TeacherComentEvent 10",
                            UserId = "1efe96d9-6618-4269-a6e3-ae1e3d3eecc4"
                        },
                        new
                        {
                            CommentId = 39,
                            EventContentId = 10,
                            RealTime = new DateTime(2021, 3, 15, 17, 30, 40, 0, DateTimeKind.Unspecified),
                            Text = "#Khả năng giải quyết vấn đề #Khả năng sáng tạo - DoctorComentEvent 10",
                            UserId = "29a908b8-3ac4-45ea-a8a1-1cf9946079c7"
                        },
                        new
                        {
                            CommentId = 40,
                            EventContentId = 10,
                            RealTime = new DateTime(2020, 3, 15, 19, 5, 25, 0, DateTimeKind.Unspecified),
                            Text = "GuardianComentEvent 10",
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Class 1"
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "Class 2"
                        },
                        new
                        {
                            CourseId = 3,
                            CourseName = "Class 3"
                        },
                        new
                        {
                            CourseId = 4,
                            CourseName = "Class 4"
                        },
                        new
                        {
                            CourseId = 5,
                            CourseName = "Class 5"
                        },
                        new
                        {
                            CourseId = 6,
                            CourseName = "Class 6"
                        },
                        new
                        {
                            CourseId = 7,
                            CourseName = "Class 7"
                        },
                        new
                        {
                            CourseId = 8,
                            CourseName = "Class 8"
                        },
                        new
                        {
                            CourseId = 9,
                            CourseName = "Class 9"
                        },
                        new
                        {
                            CourseId = 10,
                            CourseName = "Class 10"
                        },
                        new
                        {
                            CourseId = 11,
                            CourseName = "Class 11"
                        },
                        new
                        {
                            CourseId = 12,
                            CourseName = "Class 12"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EventName = "Bóng đá",
                            Icon = "fa fa-futbol-o"
                        },
                        new
                        {
                            EventId = 2,
                            EventName = "Hát",
                            Icon = "las la-microphone-alt"
                        },
                        new
                        {
                            EventId = 3,
                            EventName = "Bóng chuyền",
                            Icon = "las la-volleyball-ball"
                        },
                        new
                        {
                            EventId = 4,
                            EventName = "Bóng rổ",
                            Icon = "las la-basketball-ball"
                        },
                        new
                        {
                            EventId = 5,
                            EventName = "Sách",
                            Icon = "las la-book-reader"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.EventContent", b =>
                {
                    b.Property<int>("EventContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionAbility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CommunityAbility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CourseCurrentId")
                        .HasColumnType("integer");

                    b.Property<string>("DemonstratedAbility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("SelfDevelopment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<string>("ThinkingAbility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EventContentId");

                    b.HasIndex("CourseCurrentId");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("EventContents");

                    b.HasData(
                        new
                        {
                            EventContentId = 1,
                            ActionAbility = "Answer 12",
                            CommunityAbility = "Answer 11",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 13",
                            EventId = 1,
                            SelfDevelopment = "Answer 14",
                            StatusId = 3,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 15"
                        },
                        new
                        {
                            EventContentId = 2,
                            ActionAbility = "Answer 22",
                            CommunityAbility = "Answer 21",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 23",
                            EventId = 3,
                            SelfDevelopment = "Answer 24",
                            StatusId = 3,
                            StudentId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c",
                            ThinkingAbility = "Answer 25"
                        },
                        new
                        {
                            EventContentId = 3,
                            ActionAbility = "Answer 112",
                            CommunityAbility = "Answer 111",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 113",
                            EventId = 4,
                            SelfDevelopment = "Answer 114",
                            StatusId = 3,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 115"
                        },
                        new
                        {
                            EventContentId = 4,
                            ActionAbility = "Answer 1112",
                            CommunityAbility = "Answer 1111",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 1113",
                            EventId = 4,
                            SelfDevelopment = "Answer 1114",
                            StatusId = 3,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 1115"
                        },
                        new
                        {
                            EventContentId = 5,
                            ActionAbility = "Answer 11112",
                            CommunityAbility = "Answer 11111",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 11113",
                            EventId = 5,
                            SelfDevelopment = "Answer 11114",
                            StatusId = 3,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 11115"
                        },
                        new
                        {
                            EventContentId = 6,
                            ActionAbility = "Answer 222",
                            CommunityAbility = "Answer 221",
                            CourseCurrentId = 1,
                            DemonstratedAbility = "Answer 223",
                            EventId = 2,
                            SelfDevelopment = "Answer 224",
                            StatusId = 3,
                            StudentId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c",
                            ThinkingAbility = "Answer 225"
                        },
                        new
                        {
                            EventContentId = 7,
                            ActionAbility = "Answer 111112",
                            CommunityAbility = "Answer 111111",
                            CourseCurrentId = 2,
                            DemonstratedAbility = "Answer 111113",
                            EventId = 2,
                            SelfDevelopment = "Answer 111114",
                            StatusId = 1,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 111115"
                        },
                        new
                        {
                            EventContentId = 8,
                            ActionAbility = "Answer 1111112",
                            CommunityAbility = "Answer 1111111",
                            CourseCurrentId = 2,
                            DemonstratedAbility = "Answer 1111113",
                            EventId = 2,
                            SelfDevelopment = "Answer 1111114",
                            StatusId = 1,
                            StudentId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8",
                            ThinkingAbility = "Answer 1111115"
                        },
                        new
                        {
                            EventContentId = 9,
                            ActionAbility = "Answer 2222",
                            CommunityAbility = "Answer 2221",
                            CourseCurrentId = 2,
                            DemonstratedAbility = "Answer 2223",
                            EventId = 5,
                            SelfDevelopment = "Answer 2224",
                            StatusId = 1,
                            StudentId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c",
                            ThinkingAbility = "Answer 2225"
                        },
                        new
                        {
                            EventContentId = 10,
                            ActionAbility = "Answer 32",
                            CommunityAbility = "Answer 31",
                            CourseCurrentId = 3,
                            DemonstratedAbility = "Answer 33",
                            EventId = 3,
                            SelfDevelopment = "Answer 34",
                            StatusId = 1,
                            StudentId = "3c592e96-f3ad-4e8b-9cbe-afb7ea745362",
                            ThinkingAbility = "Answer 35"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.EventContentAbility", b =>
                {
                    b.Property<int>("EventContentId")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityId")
                        .HasColumnType("integer");

                    b.HasKey("EventContentId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("EventContentAbilities");

                    b.HasData(
                        new
                        {
                            EventContentId = 1,
                            AbilityId = 1
                        },
                        new
                        {
                            EventContentId = 1,
                            AbilityId = 5
                        },
                        new
                        {
                            EventContentId = 1,
                            AbilityId = 11
                        },
                        new
                        {
                            EventContentId = 2,
                            AbilityId = 2
                        },
                        new
                        {
                            EventContentId = 3,
                            AbilityId = 2
                        },
                        new
                        {
                            EventContentId = 4,
                            AbilityId = 2
                        },
                        new
                        {
                            EventContentId = 5,
                            AbilityId = 5
                        },
                        new
                        {
                            EventContentId = 6,
                            AbilityId = 9
                        },
                        new
                        {
                            EventContentId = 7,
                            AbilityId = 3
                        },
                        new
                        {
                            EventContentId = 8,
                            AbilityId = 12
                        },
                        new
                        {
                            EventContentId = 9,
                            AbilityId = 1
                        },
                        new
                        {
                            EventContentId = 10,
                            AbilityId = 4
                        },
                        new
                        {
                            EventContentId = 10,
                            AbilityId = 6
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.NotificationEventContent", b =>
                {
                    b.Property<int>("NotificationEventContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventContentId")
                        .HasColumnType("integer");

                    b.Property<int>("Notification")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("NotificationEventContentId");

                    b.HasIndex("EventContentId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationEventContents");

                    b.HasData(
                        new
                        {
                            NotificationEventContentId = 1,
                            EventContentId = 1,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 2,
                            EventContentId = 1,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 3,
                            EventContentId = 1,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 4,
                            EventContentId = 1,
                            Notification = 0,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 5,
                            EventContentId = 2,
                            Notification = 0,
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            NotificationEventContentId = 6,
                            EventContentId = 2,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 7,
                            EventContentId = 2,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 8,
                            EventContentId = 2,
                            Notification = 0,
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            NotificationEventContentId = 9,
                            EventContentId = 3,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 10,
                            EventContentId = 3,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 11,
                            EventContentId = 3,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 12,
                            EventContentId = 3,
                            Notification = 0,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 13,
                            EventContentId = 4,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 14,
                            EventContentId = 4,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 15,
                            EventContentId = 4,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 16,
                            EventContentId = 4,
                            Notification = 0,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 17,
                            EventContentId = 5,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 18,
                            EventContentId = 5,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 19,
                            EventContentId = 5,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 20,
                            EventContentId = 5,
                            Notification = 0,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 21,
                            EventContentId = 6,
                            Notification = 0,
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            NotificationEventContentId = 22,
                            EventContentId = 6,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 23,
                            EventContentId = 6,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 24,
                            EventContentId = 6,
                            Notification = 0,
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            NotificationEventContentId = 25,
                            EventContentId = 7,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 26,
                            EventContentId = 7,
                            Notification = 0,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 27,
                            EventContentId = 7,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 28,
                            EventContentId = 7,
                            Notification = 0,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 29,
                            EventContentId = 8,
                            Notification = 0,
                            UserId = "2f3baf7f-a5b4-4627-abcb-0e42e2fb33a8"
                        },
                        new
                        {
                            NotificationEventContentId = 30,
                            EventContentId = 8,
                            Notification = 2,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 31,
                            EventContentId = 8,
                            Notification = 0,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 32,
                            EventContentId = 8,
                            Notification = 3,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        },
                        new
                        {
                            NotificationEventContentId = 33,
                            EventContentId = 9,
                            Notification = 1,
                            UserId = "2f67c183-6ebf-4920-9cca-7d1a7a2b173c"
                        },
                        new
                        {
                            NotificationEventContentId = 34,
                            EventContentId = 9,
                            Notification = 2,
                            UserId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            NotificationEventContentId = 35,
                            EventContentId = 9,
                            Notification = 1,
                            UserId = "2115c7e6-9aae-43cb-a406-d504578498ba"
                        },
                        new
                        {
                            NotificationEventContentId = 36,
                            EventContentId = 9,
                            Notification = 0,
                            UserId = "560b9a81-71e6-4987-a6c2-ecf72ecd36b5"
                        },
                        new
                        {
                            NotificationEventContentId = 37,
                            EventContentId = 10,
                            Notification = 3,
                            UserId = "3c592e96-f3ad-4e8b-9cbe-afb7ea745362"
                        },
                        new
                        {
                            NotificationEventContentId = 38,
                            EventContentId = 10,
                            Notification = 2,
                            UserId = "1efe96d9-6618-4269-a6e3-ae1e3d3eecc4"
                        },
                        new
                        {
                            NotificationEventContentId = 39,
                            EventContentId = 10,
                            Notification = 0,
                            UserId = "29a908b8-3ac4-45ea-a8a1-1cf9946079c7"
                        },
                        new
                        {
                            NotificationEventContentId = 40,
                            EventContentId = 10,
                            Notification = 2,
                            UserId = "3dabf300-50ab-438b-baaa-f6890f2b260c"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.UserCourseDetail", b =>
                {
                    b.Property<int>("CourseCurrentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<string>("TeacherId")
                        .HasColumnType("text");

                    b.HasKey("CourseCurrentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("UserCourseDetails");

                    b.HasData(
                        new
                        {
                            CourseCurrentId = 1,
                            CourseId = 1,
                            DoctorId = "2115c7e6-9aae-43cb-a406-d504578498ba",
                            TeacherId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CourseCurrentId = 2,
                            CourseId = 2,
                            DoctorId = "2115c7e6-9aae-43cb-a406-d504578498ba",
                            TeacherId = "16a69b03-3b90-49a2-9cac-4b940c91514c"
                        },
                        new
                        {
                            CourseCurrentId = 3,
                            CourseId = 1,
                            DoctorId = "29a908b8-3ac4-45ea-a8a1-1cf9946079c7",
                            TeacherId = "1efe96d9-6618-4269-a6e3-ae1e3d3eecc4"
                        });
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Wiki", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TableId", "StatusId");

                    b.ToTable("Wikis");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            StatusId = 1,
                            IsDeleted = false,
                            StatusName = "Đang xác nhận",
                            TableName = "EventContent"
                        },
                        new
                        {
                            TableId = 1,
                            StatusId = 2,
                            IsDeleted = false,
                            StatusName = "Xác nhận",
                            TableName = "EventContent"
                        },
                        new
                        {
                            TableId = 1,
                            StatusId = 3,
                            IsDeleted = false,
                            StatusName = "Hoàn thành",
                            TableName = "EventContent"
                        },
                        new
                        {
                            TableId = 1,
                            StatusId = 4,
                            IsDeleted = false,
                            StatusName = "Đã xóa",
                            TableName = "EventContent"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamNET.Models.Entity.Comment", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.EventContent", "EventContent")
                        .WithMany("Comments")
                        .HasForeignKey("EventContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EventContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.EventContent", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.UserCourseDetail", "UserCourseDetalis")
                        .WithMany()
                        .HasForeignKey("CourseCurrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("EventContents")
                        .HasForeignKey("StudentId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Event");

                    b.Navigation("UserCourseDetalis");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.EventContentAbility", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.EventContent", "EventContent")
                        .WithMany("EventContentAbilities")
                        .HasForeignKey("EventContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("EventContent");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.NotificationEventContent", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.EventContent", "EventContent")
                        .WithMany()
                        .HasForeignKey("EventContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "UserNotification")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EventContent");

                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.UserCourseDetail", b =>
                {
                    b.HasOne("TeamNET.Models.Entity.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("TeamNET.Models.Entity.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Doctor");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.ApplicationUser", b =>
                {
                    b.Navigation("EventContents");
                });

            modelBuilder.Entity("TeamNET.Models.Entity.EventContent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventContentAbilities");
                });
#pragma warning restore 612, 618
        }
    }
}
